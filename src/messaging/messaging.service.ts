import { Injectable, Logger } from '@nestjs/common';
import { TelegramClient } from 'telegram';
import { StringSession } from 'telegram/sessions';
import * as dotenv from 'dotenv';
import * as input from 'input';
import * as fs from 'fs';

dotenv.config();

@Injectable()
export class MessagingService {
  private readonly logger = new Logger(MessagingService.name);
  private client: TelegramClient;
  private readonly apiId: number;
  private readonly apiHash: string;
  private readonly sessionFile = 'telegram-session.json';

  constructor() {
    const apiIdStr = process.env.TELEGRAM_API_ID;
    const apiHashStr = process.env.TELEGRAM_API_HASH;
    
    if (!apiIdStr || !apiHashStr) {
      throw new Error('TELEGRAM_API_ID and TELEGRAM_API_HASH must be set in .env file');
    }
    
    this.apiId = parseInt(apiIdStr);
    this.apiHash = apiHashStr;
  }

  private loadSession(): string {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ .env —Ñ–∞–π–ª–∞
    const envSession = process.env.TELEGRAM_SESSION_STRING;
    if (envSession && envSession.trim().length > 0) {
      this.logger.log('Loaded session from .env variable');
      return envSession.trim();
    }

    // –ï—Å–ª–∏ –≤ .env –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
    try {
      if (fs.existsSync(this.sessionFile)) {
        const sessionData = JSON.parse(fs.readFileSync(this.sessionFile, 'utf8'));
        this.logger.log('Loaded session from file');
        return sessionData.session;
      }
    } catch (error) {
      this.logger.warn('Failed to load session file:', error.message);
    }
    
    this.logger.log('No existing session found, will require authentication');
    return '';
  }

  private saveSession(session: string) {
    try {
      fs.writeFileSync(this.sessionFile, JSON.stringify({ session }));
      this.logger.log('Session saved successfully');
    } catch (error) {
      this.logger.error('Failed to save session:', error.message);
    }
  }

  async initializeClient() {
    try {
      const savedSession = this.loadSession();
      const session = new StringSession(savedSession);
      
      this.client = new TelegramClient(session, this.apiId, this.apiHash, {
        connectionRetries: 5,
      });

      await this.client.start({
        phoneNumber: async () => {
          this.logger.log('First time authentication required');
          return await input.text('Please enter your phone number (with country code, e.g. +1234567890): ');
        },
        password: async () => {
          return await input.text('Please enter your 2FA password: ');
        },
        phoneCode: async () => {
          return await input.text('Please enter the code you received: ');
        },
        onError: (err) => {
          this.logger.error('Authentication error:', err);
        },
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const sessionString = this.client.session.save() as unknown as string;
      this.saveSession(sessionString);

      // –í—ã–≤–æ–¥–∏–º session string –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      this.logger.log('‚úÖ Authentication successful!');
      this.logger.log('üìã Session string for server deployment:');
      this.logger.log('TELEGRAM_SESSION_STRING=' + sessionString);
      this.logger.log('üí° Copy this line to your .env file on the server');

      this.logger.log('Messaging client initialized successfully');
    } catch (error) {
      this.logger.error('Failed to initialize messaging client:', error.message);
      throw error;
    }
  }

  async sendMessage(chatId: string, text: string): Promise<boolean> {
    if (!this.client) {
      throw new Error('Telegram client not initialized');
    }

    try {
      this.logger.log(`üì§ Sending message to chat ${chatId}: "${text}"`);
      
      const entity = await this.client.getEntity(chatId);
      await this.client.sendMessage(entity, { message: text });
      
      this.logger.log(`‚úÖ Message sent successfully to ${chatId}`);
      return true;
    } catch (error) {
      this.logger.error(`‚ùå Failed to send message to ${chatId}: ${error.message}`);
      return false;
    }
  }

  async sendMessageWithLogging(chatId: string, text: string, logChatId: string): Promise<boolean | 'flood_wait'> {
    if (!this.client) {
      throw new Error('Telegram client not initialized');
    }

    try {
      this.logger.log(`üì§ Sending message to chat ${chatId}`);
      
      const entity = await this.client.getEntity(chatId);
      const sentMessage = await this.client.sendMessage(entity, { message: text });
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∞
      const now = new Date();
      const timeString = now.toLocaleString('ru-RU', {
        timeZone: 'Europe/Moscow',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      });
      
      const chatTitle = this.getEntityTitle(entity);
      const postLink = this.getPostLink(entity, sentMessage.id);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ª–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const logMessage = `‚úÖ MESSAGE SENT
‚è∞ Time: ${timeString}
üí¨ Group name: ${chatTitle}
üîó Post link: ${postLink}`;
      
      await this.sendLogMessage(logChatId, logMessage);
      
      this.logger.log(`‚úÖ Message sent successfully to ${chatId}`);
      return true;
    } catch (error) {
      const errorInfo = this.analyzeError(error);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏
      const now = new Date();
      const timeString = now.toLocaleString('ru-RU', {
        timeZone: 'Europe/Moscow',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      });
      
      const logMessage = `‚ùå SEND FAILED
‚è∞ Time: ${timeString}
üí¨ Group: ${chatId}
üö´ Error: ${errorInfo.description}
‚ö†Ô∏è Action: ${errorInfo.action}`;
      
      await this.sendLogMessage(logChatId, logMessage);
      
      this.logger.error(`‚ùå ${errorInfo.description} for chat ${chatId}`);
      
      // –ï—Å–ª–∏ —ç—Ç–æ FloodWait - –∂–¥–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
      if (errorInfo.waitTime > 0) {
        this.logger.warn(`‚è≥ Need to wait ${errorInfo.waitTime} seconds due to flood control`);
        return 'flood_wait'; // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–º –∫–æ–¥–µ
      }
      
      return false;
    }
  }

  private analyzeError(error: any): { description: string; action: string; waitTime: number } {
    const errorMessage = error.message || error.toString();
    
    // FloodWaitError - –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å
    if (errorMessage.includes('FLOOD_WAIT') || errorMessage.includes('Too Many Requests')) {
      const waitMatch = errorMessage.match(/(\d+)/);
      const waitTime = waitMatch ? parseInt(waitMatch[1]) : 300; // default 5 –º–∏–Ω—É—Ç
      
      return {
        description: `Flood control activated, need to wait ${waitTime} seconds`,
        action: 'Will pause bulk sending until flood control expires',
        waitTime: waitTime
      };
    }
    
    // –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
    if (errorMessage.includes('CHAT_WRITE_FORBIDDEN') || errorMessage.includes('write access')) {
      return {
        description: 'No permission to send messages to this chat',
        action: 'Skip this chat and continue with others',
        waitTime: 0
      };
    }
    
    // –ó–∞–±–∞–Ω–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª–µ
    if (errorMessage.includes('USER_BANNED_IN_CHANNEL') || errorMessage.includes('banned')) {
      return {
        description: 'User is banned in this channel',
        action: 'Skip this chat permanently',
        waitTime: 0
      };
    }
    
    // –ö–∞–Ω–∞–ª —Å—Ç–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–º
    if (errorMessage.includes('CHANNEL_PRIVATE') || errorMessage.includes('private')) {
      return {
        description: 'Channel became private or was deleted',
        action: 'Skip this chat permanently',
        waitTime: 0
      };
    }
    
    // –ù—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if (errorMessage.includes('CHAT_ADMIN_REQUIRED') || errorMessage.includes('admin')) {
      return {
        description: 'Admin rights required to send messages',
        action: 'Skip this chat and continue with others',
        waitTime: 0
      };
    }
    
    // –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    if (errorMessage.includes('PEER_ID_INVALID') || errorMessage.includes('Could not find')) {
      return {
        description: 'Chat not found or not accessible',
        action: 'Skip this chat permanently',
        waitTime: 0
      };
    }
    
    // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
    return {
      description: `Unknown error: ${errorMessage}`,
      action: 'Skip this chat and continue with others',
      waitTime: 0
    };
  }

  private getPostLink(entity: any, messageId: number): string {
    // –ï—Å–ª–∏ —É –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã –µ—Å—Ç—å username - –∏—Å–ø–æ–ª—å–∑—É–µ–º t.me —Å—Å—ã–ª–∫—É
    if (entity?.username) {
      return `https://t.me/${entity.username}/${messageId}`;
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç username, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
    if (entity?.className === 'Channel') {
      // –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å—Å—ã–ª–∫–∞ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ t.me/c/CHANNEL_ID/MESSAGE_ID
      // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å -100 –∏–∑ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å—Å—ã–ª–∫–∏
      const channelId = entity.id.toString().replace('-100', '');
      return `https://t.me/c/${channelId}/${messageId}`;
    }
    
    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≥—Ä—É–ø–ø –±–µ–∑ username - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± ID
    return `Private group (ID: ${entity.id}, Message: ${messageId})`;
  }

  private async sendLogMessage(logChatId: string, message: string): Promise<void> {
    try {
      const logEntity = await this.client.getEntity(logChatId);
      await this.client.sendMessage(logEntity, { message });
    } catch (error) {
      this.logger.error(`Failed to send log message: ${error.message}`);
    }
  }

  private getEntityTitle(entity: any): string {
    return entity?.title || entity?.firstName || 'Unknown';
  }

  private getEntityLink(entity: any): string {
    if (entity?.username) {
      return `https://t.me/${entity.username}`;
    }
    return `Chat ID: ${entity?.id || 'Unknown'}`;
  }

  async sendBulkMessagesWithInterval(
    chatIds: string[], 
    text: string, 
    logChatId: string,
    intervalSeconds: number = 90
  ): Promise<void> {
    this.logger.log(`üì§ Starting infinite bulk messaging to ${chatIds.length} chats with ${intervalSeconds}s interval...`);
    
    let totalSuccessCount = 0;
    let totalFailCount = 0;
    let totalFloodWaitCount = 0;
    let roundNumber = 1;

    // –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Ä–∞—Å—Å—ã–ª–∫–∏
    while (true) {
      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –∫—Ä—É–≥–∞
      const roundStartMessage = `üîÑ NEW ROUND STARTED
‚è∞ Time: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}
üéØ Round #${roundNumber}
üìù Chats in round: ${chatIds.length}
üìä Total stats: ‚úÖ${totalSuccessCount} ‚ùå${totalFailCount} ‚è∏Ô∏è${totalFloodWaitCount}`;
      
      await this.sendLogMessage(logChatId, roundStartMessage);
      this.logger.log(`üîÑ Starting round #${roundNumber}`);

      let roundSuccessCount = 0;
      let roundFailCount = 0;
      let roundFloodWaitCount = 0;
      let roundStopped = false;

      // –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º –≤ —Ç–µ–∫—É—â–µ–º –∫—Ä—É–≥–µ
      for (let i = 0; i < chatIds.length; i++) {
        const chatId = chatIds[i];
        
        this.logger.log(`üìä Round ${roundNumber} - Progress: ${i + 1}/${chatIds.length} chats`);
        
        const result = await this.sendMessageWithLogging(chatId, text, logChatId);
        
        if (result === true) {
          roundSuccessCount++;
          totalSuccessCount++;
        } else if (result === 'flood_wait') {
          roundFloodWaitCount++;
          totalFloodWaitCount++;
          roundStopped = true;
          
          // –ü—Ä–∏ FloodWait –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—Ä—É–≥
          this.logger.warn('üö´ FloodWait detected! Pausing current round...');
          
          const pauseMessage = `‚è∏Ô∏è ROUND PAUSED (FLOOD WAIT)
‚è∞ Time: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}
üéØ Round #${roundNumber} paused
üö´ Reason: Telegram flood control activated
üìä Round progress: ${i + 1}/${chatIds.length} chats processed
‚úÖ Round sent: ${roundSuccessCount} | ‚ùå Round failed: ${roundFailCount}
‚è≥ Will start new round after flood control expires`;
          
          await this.sendLogMessage(logChatId, pauseMessage);
          break; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—Ä—É–≥
        } else {
          roundFailCount++;
          totalFailCount++;
        }
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫—Ä—É–≥–µ)
        if (i < chatIds.length - 1) {
          this.logger.log(`‚è≥ Waiting ${intervalSeconds} seconds before next message...`);
          await new Promise(resolve => setTimeout(resolve, intervalSeconds * 1000));
        }
      }

      // –û—Ç—á–µ—Ç –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫—Ä—É–≥–∞
      if (!roundStopped) {
        const roundCompleteMessage = `‚úÖ ROUND COMPLETED
‚è∞ Time: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}
üéØ Round #${roundNumber} finished
‚úÖ Round sent: ${roundSuccessCount}
‚ùå Round failed: ${roundFailCount}
üìä Total stats: ‚úÖ${totalSuccessCount} ‚ùå${totalFailCount} ‚è∏Ô∏è${totalFloodWaitCount}
üîÑ Starting next round in ${intervalSeconds} seconds...`;
        
        await this.sendLogMessage(logChatId, roundCompleteMessage);
        this.logger.log(`‚úÖ Round #${roundNumber} completed: ${roundSuccessCount} sent, ${roundFailCount} failed`);
        
        // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä—É–≥–æ–º
        this.logger.log(`‚è≥ Waiting ${intervalSeconds} seconds before next round...`);
        await new Promise(resolve => setTimeout(resolve, intervalSeconds * 1000));
      }

      roundNumber++;
      
      // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö FloodWait
      if (roundFloodWaitCount > 0 && !roundStopped) {
        this.logger.warn('‚ö†Ô∏è FloodWait detected but round completed. Adding extra delay...');
        await new Promise(resolve => setTimeout(resolve, 300 * 1000)); // 5 –º–∏–Ω—É—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–∞—É–∑—ã
      }
    }
  }

  async disconnect() {
    if (this.client) {
      await this.client.disconnect();
      this.logger.log('Messaging client disconnected');
    }
  }
}
